var mdModeless = {}; !function () { "use strict"; angular.module("mdModeless", ["material.core", "material.components.backdrop", "myDraggable"]).directive("mdModeless", ["$$rAF", "$mdTheming", function (e, t) { return { restrict: "E", link: function (n, o, a) { t(o), e(function () { var e = o[0].querySelector("md-content"); e && e.scrollHeight > e.clientHeight && o.addClass("md-content-overflow") }) } } }]).provider("$mdModeless", ["$$interimElementProvider", function (e) { return e("$mdModeless").setDefaults({ methods: ["disableParentScroll", "hasBackdrop", "clickOutsideToClose", "escapeToClose", "targetEvent", "parent"], options: function (e, t, n, o, a, l, r, s, d, i, c) { return { hasBackdrop: !1, isolateScope: !0, onShow: function (c, m, f) { m = n.extractElementByName(m, "md-modeless"), f.parent = angular.element(f.parent), f.popInTarget = angular.element((f.targetEvent || {}).target); var h = function () { var e = m[0].querySelector(".modeless-close"); if (!e) { var t = m[0].querySelectorAll(".md-actions button"); e = t[t.length - 1] } return angular.element(e) }(); if (f.hasBackdrop) { var b = f.parent[0] == t[0].body && t[0].documentElement && t[0].documentElement.scrollTop ? angular.element(t[0].documentElement) : f.parent, g = b.prop("scrollTop"); f.backdrop = angular.element('<md-backdrop class="md-modeless-backdrop md-opaque">'), f.backdrop.css("top", g + "px"), a.inherit(f.backdrop, f.parent), d.enter(f.backdrop, f.parent), m.css("top", g + "px") } var k = "modeless", v = h; "alert" === f.$type && (k = "alertmodeless", v = m.find("md-content")); (function (t, o, a) { t.attr({ role: o, tabIndex: "-1" }); var l = t.find("md-content"); 0 === l.length && (l = t); var r = t.attr("id") || "modeless_" + n.nextUid(); l.attr("id", r), t.attr("aria-describedby", r), a.ariaLabel ? e.expect(t, "aria-label", a.ariaLabel) : e.expectAsync(t, "aria-label", function () { var e = l.text().split(/\s+/); return e.length > 3 && (e = e.slice(0, 3).concat("...")), e.join(" ") }) })(m.find("md-modeless"), k, f), f.disableParentScroll && (f.lastOverflow = f.parent.css("overflow"), f.parent.css("overflow", "hidden")); return (C = m, T = f.parent, y = f.popInTarget && f.popInTarget.length && f.popInTarget, E = C.find("md-modeless"), T.append(C), u(E, y), i(function () { E.addClass("transition-in").css(o.CSS.TRANSFORM, "") }), n.transitionEndPromise(E)).then(function () { p(m, !0), f.escapeToClose && (f.rootElementKeyupCallback = function (e) { e.keyCode === o.KEY_CODE.ESCAPE && r(l.cancel) }, s.on("keyup", f.rootElementKeyupCallback)), f.clickOutsideToClose && (f.modelessClickOutsideCallback = function (e) { e.target === m[0] && r(l.cancel) }, m.on("click", f.modelessClickOutsideCallback)), f.focusOnOpen && v.focus() }); var C, T, y, E }, onRemove: function (e, t, o) { o.backdrop && d.leave(o.backdrop); o.disableParentScroll && (o.parent.css("overflow", o.lastOverflow), delete o.lastOverflow); o.escapeToClose && s.off("keyup", o.rootElementKeyupCallback); o.clickOutsideToClose && t.off("click", o.modelessClickOutsideCallback); return p(t, !1), (a = t, o.parent, l = o.popInTarget && o.popInTarget.length && o.popInTarget, r = a.find("md-modeless"), r.addClass("transition-out").removeClass("transition-in"), u(r, l), n.transitionEndPromise(r)).then(function () { o.scope.$destroy(), t.remove(), o.popInTarget && o.popInTarget.focus() }); var a, l, r }, clickOutsideToClose: !1, escapeToClose: !0, targetEvent: null, focusOnOpen: !0, disableParentScroll: !0, transformTemplate: function (e) { return '<div my-draggable class="md-modeless-container">' + e + "</div>" } }; function m(e, t) { if (-1 !== t.indexOf(e.nodeName)) return !0 } function p(e, t) { var n = "aria-hidden"; (function e(o) { for (; o.parentNode;) { if (o === document.body) return; for (var a = o.parentNode.children, l = 0; l < a.length; l++)o === a[l] || m(a[l], ["SCRIPT", "STYLE"]) || a[l].setAttribute(n, t); e(o = o.parentNode) } })(e = e[0]) } function u(e, t) { if (t) { var n = t[0].getBoundingClientRect(), a = e[0].getBoundingClientRect(), l = Math.min(.5, n.width / a.width), r = Math.min(.5, n.height / a.height); e.css(o.CSS.TRANSFORM, "translate3d(" + (-a.left + n.left + n.width / 2 - a.width / 2) + "px," + (-a.top + n.top + n.height / 2 - a.height / 2) + "px,0) scale(" + l + "," + r + ")") } } } }).addPreset("alert", { methods: ["title", "content", "ariaLabel", "ok", "theme"], options: t }).addPreset("confirm", { methods: ["title", "content", "ariaLabel", "ok", "cancel", "theme"], options: t }); function t(e, t) { return { template: ['<md-modeless md-theme="{{ modeless.theme }}" aria-label="{{ modeless.ariaLabel }}">', '<md-content role="document" tabIndex="0">', '<h2 class="md-title">{{ modeless.title }}</h2>', "<p>{{ modeless.content }}</p>", "</md-content>", '<div class="md-actions">', '<md-button ng-if="modeless.$type == \'confirm\'" ng-click="modeless.abort()">', "{{ modeless.cancel }}", "</md-button>", '<md-button ng-click="modeless.hide()" class="md-primary">', "{{ modeless.ok }}", "</md-button>", "</div>", "</md-modeless>"].join(""), controller: function () { this.hide = function () { e.hide(!0) }, this.abort = function () { e.cancel() } }, controllerAs: "modeless", bindToController: !0, theme: t.defaultTheme() } } }]) }();
